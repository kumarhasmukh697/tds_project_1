import os
import requests
import subprocess
import time

def create_and_deploy_repo(task, app_dir):
    """
    Creates a new GitHub repository, commits generated files,
    pushes them, enables GitHub Pages, and returns repo info.
    """
    github_token = os.environ.get("GITHUB_TOKEN")
    github_username = os.environ.get("GITHUB_USERNAME")

    # ✅ Always unique repo name using timestamp
    repo_name = f"{task}-{int(time.time())}"

    # ✅ Step 1 — Create repo on GitHub
    create_repo_url = "https://api.github.com/user/repos"
    headers = {
        "Authorization": f"token {github_token}",
        "Accept": "application/vnd.github.v3+json"
    }
    payload = {
        "name": repo_name,
        "description": "Auto-generated by LLM Deployment Project",
        "private": False
    }

    response = requests.post(create_repo_url, headers=headers, json=payload)
    if response.status_code not in [200, 201]:
        raise Exception(f"Failed to create repo: {response.text}")

    repo_url = f"https://github.com/{github_username}/{repo_name}"
    print(f"✅ Created repo: {repo_url}")

    # ✅ Step 2 — Initialize git locally inside the generated app folder
    subprocess.run(["git", "init"], cwd=app_dir, check=True)
    subprocess.run(["git", "config", "user.name", "automation-bot"], cwd=app_dir, check=True)
    subprocess.run(["git", "config", "user.email", "automation@bot.com"], cwd=app_dir, check=True)
    subprocess.run(["git", "add", "."], cwd=app_dir, check=True)
    subprocess.run(["git", "commit", "-m", "Initial commit"], cwd=app_dir, check=True)

    # ✅ Step 3 — Get commit SHA
    commit_sha = subprocess.check_output(["git", "rev-parse", "HEAD"], cwd=app_dir).decode().strip()

    # ✅ Step 4 — Push to GitHub safely
    subprocess.run(["git", "branch", "-M", "main"], cwd=app_dir, check=True)

    # Remove old origin if exists, then add new
    subprocess.run(["git", "remote", "remove", "origin"], cwd=app_dir, check=False)
    subprocess.run([
        "git", "remote", "add", "origin",
        f"https://{github_token}@github.com/{github_username}/{repo_name}.git"
    ], cwd=app_dir, check=True)

    subprocess.run(["git", "push", "-u", "origin", "main"], cwd=app_dir, check=True)

    # ✅ Step 5 — Enable GitHub Pages
    pages_url = f"https://{github_username}.github.io/{repo_name}/"
    pages_api_url = f"https://api.github.com/repos/{github_username}/{repo_name}/pages"
    pages_payload = {"source": {"branch": "main", "path": "/"}}
    enable_pages = requests.post(pages_api_url, headers=headers, json=pages_payload)
    if enable_pages.status_code in [201, 204]:
        print("✅ GitHub Pages successfully enabled.")
    else:
        print(f"⚠️ Warning: GitHub Pages enable failed — {enable_pages.text}")

    # ✅ Step 6 — Wait for Pages to go live
    print("⏳ Waiting for GitHub Pages to become live...")
    for _ in range(20):
        r = requests.get(pages_url)
        if r.status_code == 200:
            print("✅ GitHub Pages is live!")
            break
        time.sleep(6)

    return repo_url, commit_sha, pages_url
